#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('powerweb:server')
var http = require('http')

/**
 * Need the HTTPS & file system modules
 */
const https = require('https')
const fs = require('fs')
const host = 'GALATEA'

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3333')
app.set('port', port)

/**
 *  Setup the HTTPS options, reading the certificate files
 */
// Pick up certs
var httpOptions = {
  key: fs.readFileSync('certs/privatekey.pem'),
  cert: fs.readFileSync('certs/certificate.pem')
}

/**
 * Create HTTP server - Now needs to be HTTPS
 */
var server = https.createServer(httpOptions, app)
// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)

// Send started message to logs
console.log('*** Starting PowerWeb ***')
console.log(`Host: ${host}`)
console.log(`Running on Port: ${port}`)

server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
